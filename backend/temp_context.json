{"content": "================================================\nFile: README.md\n================================================\n# Gitman\n\nA conversational AI tool for understanding GitHub repositories. Ask questions about any codebase using text or voice.\n\n## Features\n\n- \ud83d\udd0d Analyze any public GitHub repository\n- \ud83d\udcac Ask questions about the code in natural language  \n- \ud83c\udf99\ufe0f Voice interface for hands-free interaction\n- \ud83e\udd16 Powered by Google's Gemini AI\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 18+\n- Python 3.8+\n- Chrome/Chromium browser\n- Google API key\n\n### Installation\n\n1. Clone and install dependencies:\n\n```bash\ngit clone https://github.com/yourusername/gitman.git\ncd gitman\nnpm install\n```\n\n2. Set up environment variables:\n\nCreate `backend/.env`:\n```bash\nGOOGLE_API_KEY=your_google_api_key\n```\n\n3. Start the servers:\n\n```bash\ncd frontend\nnpm install\nnpm run dev\n```\n\n```bash\ncd backend\npip install -r requirements.txt\npython app.py\n```\n4. Open http://localhost:3000\n\n## Usage\n\n1. Enter a GitHub repository URL\n2. Wait for analysis to complete\n3. Ask questions about the codebase:\n   - Type in the chat input\n   - Or use voice with the microphone button\n4. Get AI-powered explanations about the code\n\n\n## License\n\nMIT\n\n\n================================================\nFile: planning.txt\n================================================\n\n1. User inputs repo (backend parses repo with git ingest + repo at each commit; maybe just diffs)\n2. User enters query (how did function a change over time?). AI finds most relevant commit/diff and then does analysis\n3. Maybe does some sort of rag for extra context on repo? TBD. Returns the information to user\n4. Cooler if steps 2-3 done through voice (elevenlabs and openai whispr)\n\nWhy it's better than cursor:\n- Cursor only has context for couple files\n- Cursor only sees current code (not the choices made in commit)\n- Speaking is faster/more efficient.\n\nExtra: \n1. Get the commit messages (claim you can look back)\n\n\n\nNotes:\nCan't use full end to end integration elevenlabs (bc context window limitations for the API)\nProbably will need to do api call to gpt with context of the source code, then ask questions, and read out loud the response. \n\n\n\n\n================================================\nFile: requirements.txt\n================================================\nflask==3.0.2\nflask-cors==4.0.0\ngitingest==0.1.3 \n\n================================================\nFile: store.txt\n================================================\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport logging\nimport json\nimport os\nfrom gitingest_scraper import ingest_repository\nfrom chat_pipeline import get_chat_response\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\nCORS(app)\n\n# Path for temporary storage\nTEMP_STORAGE_FILE = \"temp_context.json\"\n\ndef save_context(content, tree):\n    \"\"\"Save the current context to a temporary file\"\"\"\n    context = {\n        'content': content,\n        'tree': tree\n    }\n    with open(TEMP_STORAGE_FILE, 'w') as f:\n        json.dump(context, f)\n\ndef load_context():\n    \"\"\"Load the current context from temporary file\"\"\"\n    if not os.path.exists(TEMP_STORAGE_FILE):\n        return None\n    with open(TEMP_STORAGE_FILE, 'r') as f:\n        return json.load(f)\n\n@app.route('/ingest', methods=['POST'])\ndef ingest_from_web():\n    \"\"\"Ingest a repository and store its content\"\"\"\n    try:\n        data = request.get_json()\n        repo_url = data.get('url')\n        \n        if not repo_url:\n            return jsonify({'error': 'No URL provided'}), 400\n\n        result = ingest_repository(repo_url)\n        \n        if not result['success']:\n            return jsonify({\n                'success': False,\n                'error': result.get('error', 'Unknown error'),\n                'url': repo_url\n            }), 500\n            \n        # Save the context for later use\n        save_context(result['content'], result['tree'])\n            \n        return jsonify({\n            'success': True,\n            'url': repo_url,\n            'content': result['content'],\n            'tree': result['tree']\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error in ingest endpoint: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'url': repo_url\n        }), 500\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    \"\"\"Chat endpoint that uses stored context\"\"\"\n    print(\"wft\")\n    try:\n        data = request.get_json()\n        user_input = data.get('message')\n        \n        if not user_input:\n            return jsonify({'error': 'No message provided'}), 400\n            \n        # Load the stored context\n        context = load_context()\n        if not context:\n            return jsonify({'error': 'No context available. Please ingest a repository first.'}), 400\n            \n        # Combine content and tree for context\n        full_context = f\"Repository Content:\\n{context['content']}\\n\\nDirectory Structure:\\n{context['tree']}\"\n        \n        # Get chat response\n        result = get_chat_response(user_input, full_context)\n        \n        if not result['success']:\n            return jsonify({\n                'success': False,\n                'error': result.get('error', 'Failed to get chat response')\n            }), 500\n            \n        return jsonify({\n            'success': True,\n            'response': result['response']\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error in chat endpoint: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        }), 500\n\n@app.route('/test')\ndef test():\n    \"\"\"Test endpoint using a sample repository\"\"\"\n    try:\n        test_url = \"https://github.com/phillipyan300/GitInsight\"\n        result = ingest_repository(test_url)\n        \n        if not result['success']:\n            return jsonify({\n                'success': False,\n                'error': result.get('error', 'Unknown error'),\n                'url_tested': test_url\n            }), 500\n        \n        # Save the context for later use\n        save_context(result['content'], result['tree'])\n        \n        return jsonify({\n            'success': True,\n            'url_tested': test_url,\n            'content': result['content'],\n            'tree': result['tree']\n        })\n            \n    except Exception as e:\n        logger.error(f\"Error in test endpoint: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'url_tested': test_url\n        }), 500\n\n\n@app.route('/test-curl-get')\ndef test_curl_get():\n    \"\"\"Even simpler endpoint to test curl GET requests\"\"\"\n    logger.info(\"Received GET request to /test-curl-get\")\n    print(\"Received GET request to /test-curl-get\")  # Direct console output\n    return jsonify({\n        'success': True,\n        'message': 'GET request successful!'\n    })\n\n@app.route('/')\ndef hello_world():\n    return {'message': 'Hello, World!'}\n\nif __name__ == '__main__':\n    app.run(debug=True, port=5001) \n\n================================================\nFile: backend/app.py\n================================================\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport logging\nimport json\nimport os\nfrom gitingest_scraper import ingest_repository\nfrom chat_pipeline import get_chat_response\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\nCORS(\n    app,\n    resources={\n        r\"/api/*\": {\n            \"origins\": [\"http://localhost:3000\"],\n            \"methods\": [\"POST\", \"OPTIONS\"],\n            \"allow_headers\": [\"Content-Type\"],\n        }\n    },\n)\n# Path for temporary storage\nTEMP_STORAGE_FILE = \"temp_context.json\"\n\n\ndef save_context(content, tree):\n    \"\"\"Save the current context to a temporary file\"\"\"\n    context = {\"content\": content, \"tree\": tree}\n    with open(TEMP_STORAGE_FILE, \"w\") as f:\n        json.dump(context, f)\n\n\ndef load_context():\n    \"\"\"Load the current context from temporary file\"\"\"\n    if not os.path.exists(TEMP_STORAGE_FILE):\n        return None\n    with open(TEMP_STORAGE_FILE, \"r\") as f:\n        return json.load(f)\n\n\n@app.route(\"/api/ingest\", methods=[\"POST\"])\ndef ingest_repo():\n    try:\n        data = request.get_json()\n        repo_url = data.get(\"url\")\n\n        if not repo_url:\n            return jsonify({\"error\": \"No URL provided\"}), 400\n\n        result = ingest_repository(repo_url)\n\n        if not result[\"success\"]:\n            return (\n                jsonify(\n                    {\"success\": False, \"error\": result.get(\"error\", \"Unknown error\")}\n                ),\n                400,\n            )\n\n        # Save the context for later use\n        save_context(result[\"content\"], result[\"tree\"])\n\n        return jsonify(result)\n\n    except Exception as e:\n        logger.error(f\"Error ingesting repository: {str(e)}\")\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\n\n\n@app.route(\"/api/chat\", methods=[\"POST\"])\ndef chat():\n    \"\"\"Chat endpoint that uses stored context\"\"\"\n    try:\n        data = request.get_json()\n        message = data.get(\"message\")\n        repo_url = data.get(\"repo_url\")\n\n        if not message or not repo_url:\n            return (\n                jsonify(\n                    {\"success\": False, \"error\": \"Message and repo_url are required\"}\n                ),\n                400,\n            )\n\n        # Load the stored context\n        context = load_context()\n        if not context:\n            return (\n                jsonify(\n                    {\n                        \"success\": False,\n                        \"error\": \"No context available. Please ingest a repository first.\",\n                    }\n                ),\n                400,\n            )\n\n        # Combine content and tree for context\n        full_context = f\"Repository Context:\\n{context['content']}\\n\\nDirectory Structure:\\n{context['tree']}\"\n\n        # Get chat response using our chat pipeline\n        result = get_chat_response(message, full_context)\n\n        if not result[\"success\"]:\n            return (\n                jsonify(\n                    {\n                        \"success\": False,\n                        \"error\": result.get(\"error\", \"Failed to get chat response\"),\n                    }\n                ),\n                500,\n            )\n\n        return jsonify(\n            {\"success\": True, \"response\": result[\"response\"], \"repo_url\": repo_url}\n        )\n\n    except Exception as e:\n        logger.error(f\"Error in chat: {str(e)}\")\n        return jsonify({\"success\": False, \"error\": str(e)}), 500\n\n\n@app.route(\"/test\")\ndef test():\n    \"\"\"Test endpoint using a sample repository\"\"\"\n    try:\n        test_url = \"https://github.com/phillipyan300/GitInsight\"\n        result = ingest_repository(test_url)\n\n        if not result[\"success\"]:\n            return (\n                jsonify(\n                    {\n                        \"success\": False,\n                        \"error\": result.get(\"error\", \"Unknown error\"),\n                        \"url_tested\": test_url,\n                    }\n                ),\n                500,\n            )\n\n        # Save the context for later use\n        save_context(result[\"content\"], result[\"tree\"])\n\n        return jsonify(\n            {\n                \"success\": True,\n                \"url_tested\": test_url,\n                \"content\": result[\"content\"],\n                \"tree\": result[\"tree\"],\n            }\n        )\n\n    except Exception as e:\n        logger.error(f\"Error in test endpoint: {str(e)}\")\n        return jsonify({\"success\": False, \"error\": str(e), \"url_tested\": test_url}), 500\n\n\n@app.route(\"/test-curl-get\")\ndef test_curl_get():\n    \"\"\"Even simpler endpoint to test curl GET requests\"\"\"\n    logger.info(\"Received GET request to /test-curl-get\")\n    print(\"Received GET request to /test-curl-get\")  # Direct console output\n    return jsonify({\"success\": True, \"message\": \"GET request successful!\"})\n\n\n@app.route(\"/\")\ndef hello_world():\n    return {\"message\": \"Hello, World!\"}\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, port=8000)\n\n\n================================================\nFile: backend/chat_pipeline.py\n================================================\nimport google.generativeai as genai\nfrom dotenv import load_dotenv\nimport os\nimport logging\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(__name__)\n\n# Load environment variables\nload_dotenv()\n\n# Get API key\napi_key = os.getenv(\"GOOGLE_API_KEY\")\nif not api_key:\n    logger.error(\"GOOGLE_API_KEY not found in environment variables\")\n\n# Initialize Gemini client if API key is available\nif api_key:\n    genai.configure(api_key=api_key)\n\n\ndef get_chat_response(text, context=\"\"):\n    \"\"\"\n    Get a response from Gemini for the given text and context.\n\n    Args:\n        text (str): The user's input text\n        context (str): Optional context to help guide the response\n\n    Returns:\n        dict: {\n            'success': bool,\n            'response': str,  # The chat response if successful\n            'error': str     # Error message if not successful\n        }\n    \"\"\"\n    try:\n        if not api_key:\n            return {\"success\": False, \"error\": \"Google API key not configured\"}\n\n        logger.info(\"Sending request to Gemini\")\n\n        # Create the model\n        model = genai.GenerativeModel(\"gemini-pro\")\n\n        # Truncate context if too long (Gemini has a token limit)\n        max_context_length = 10000  # Adjust this value based on testing\n        if len(context) > max_context_length:\n            context = context[:max_context_length] + \"...\"\n\n        # System prompt to set behavior\n        system_prompt = \"\"\"You are Gitman, an AI assistant that:\n        1. Specializes in analyzing and explaining code repositories\n        2. Speaks in a natural, conversational way\n        3. References specific parts of the code when relevant\n        4. Keeps responses clear and concise\n        \n        When analyzing repositories:\n        - Point out interesting patterns or design choices\n        - Explain technical concepts in simple terms\n        - Use examples from the actual codebase\n        \"\"\"\n\n        # Combine system prompt, context, and user question\n        full_prompt = f\"\"\"{system_prompt}\n\n        Repository Context:\n        {context}\n\n        User Question: {text}\"\"\"\n\n        try:\n            # Generate response with safety checks\n            response = model.generate_content(full_prompt)\n\n            if not response or not response.text:\n                return {\"success\": False, \"error\": \"Failed to generate response\"}\n\n            logger.info(\"Received response from Gemini\")\n            return {\"success\": True, \"response\": response.text}\n\n        except Exception as e:\n            logger.error(f\"Generation error: {str(e)}\")\n            return {\"success\": False, \"error\": f\"Failed to generate response: {str(e)}\"}\n\n    except Exception as e:\n        logger.error(f\"Gemini request failed: {str(e)}\")\n        return {\"success\": False, \"error\": str(e)}\n\n\nif __name__ == \"__main__\":\n    # Test the chat pipeline\n    test_input = \"What are the key principles of clean code?\"\n    test_context = \"We are discussing software development best practices.\"\n\n    logger.info(f\"Testing chat pipeline with input: {test_input}\")\n    result = get_chat_response(test_input, test_context)\n\n    if result[\"success\"]:\n        print(\"\\n=== Chat Response ===\")\n        print(result[\"response\"])\n        print(\"\\n=== End of Response ===\")\n    else:\n        logger.error(f\"Test failed: {result['error']}\")\n\n\n================================================\nFile: backend/gitingest_scraper.py\n================================================\nimport logging\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\n# Configure logging to show info level messages\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\ndef ingest_repository(repo_url, timeout=30):\n    \"\"\"\n    Scrapes a GitHub repository's content from gitingest.com\n\n    Args:\n        repo_url (str): URL of the GitHub repository to analyze\n        timeout (int): Maximum time to wait for page elements to load (default: 30s)\n\n    Returns:\n        dict: {\n            'success': bool,\n            'content': str,  # The full repository content digest\n            'tree': str,     # The directory structure\n            'error': str     # Only present if success is False\n        }\n    \"\"\"\n    driver = None\n    try:\n        # Convert GitHub URL to gitingest URL\n        gitingest_url = repo_url.replace(\"github.com\", \"gitingest.com\")\n        logger.info(f\"Fetching from: {gitingest_url}\")\n\n        # Setup Chrome browser options\n        chrome_options = Options()\n        chrome_options.add_argument(\"--headless\")  # Enable headless mode\n        chrome_options.add_argument(\"--no-sandbox\")\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\n        chrome_options.add_argument(\"--disable-gpu\")  # Sometimes needed for headless\n        chrome_options.add_argument(\n            \"--window-size=1920,1080\"\n        )  # Set a standard window size\n\n        # Initialize the Chrome driver\n        driver = webdriver.Chrome(options=chrome_options)\n\n        # Navigate to the gitingest page\n        driver.get(gitingest_url)\n\n        # Wait for both content elements to be present in the page\n        logger.info(\"Waiting for content to load...\")\n\n        # Find the main content textarea using its full class list\n        content_area = WebDriverWait(driver, timeout).until(\n            EC.presence_of_element_located(\n                (\n                    By.CSS_SELECTOR,\n                    \"textarea.result-text.w-full.p-4.bg-\\\\[\\\\#fff4da\\\\].border-\\\\[3px\\\\].border-gray-900.rounded.font-mono.text-sm.resize-y.focus\\\\:outline-none.relative.z-10\",\n                )\n            )\n        )\n\n        # Find the directory structure in the hidden input field\n        directory_structure = WebDriverWait(driver, timeout).until(\n            EC.presence_of_element_located((By.ID, \"directory-structure-content\"))\n        )\n\n        # Debug pause to visually verify the selected elements\n        # logger.info(\"Found content! Pausing for 100 seconds so you can see what's selected...\")\n        # time.sleep(100)\n\n        # Extract the text content and directory structure\n        content = content_area.text\n        tree = directory_structure.get_attribute(\"value\")\n\n        # Verify that content was actually retrieved\n        if not content.strip():\n            return {\"success\": False, \"error\": \"Content was empty\"}\n\n        logger.info(f\"Successfully retrieved content and directory structure\")\n        return {\"success\": True, \"content\": content, \"tree\": tree}\n\n    except Exception as e:\n        logger.error(f\"Error during ingestion: {str(e)}\")\n        return {\"success\": False, \"error\": str(e)}\n    finally:\n        # Always close the browser\n        if driver:\n            driver.quit()\n\n\nif __name__ == \"__main__\":\n    # Test the script with a sample repository\n    test_url = \"https://github.com/phillipyan300/GitInsight\"\n    result = ingest_repository(test_url)\n\n    if result[\"success\"]:\n        print(\"\\n=== Content Preview (first 100 chars) ===\")\n        print(result[\"content\"][:100])\n        print(\"\\n=== Directory Structure ===\")\n        print(result[\"tree\"])\n        print(\"\\n=== End of Test ===\")\n    else:\n        print(f\"Error: {result['error']}\")\n\n\n================================================\nFile: backend/requirements.txt\n================================================\nflask[async]==3.0.2\nflask-cors==4.0.0\ngitingest==0.1.3\nselenium==4.18.1\nwebdriver-manager==4.0.1\nrequests==2.31.0\nbeautifulsoup4==4.12.3\nelevenlabs==0.2.24\npython-dotenv==1.0.0\ngoogle-generativeai==0.3.2\nhttpx==0.24.1\n\n================================================\nFile: backend/temp_context.json\n================================================\n{\"content\": \"================================================\\nFile: Cargo.toml\\n================================================\\n[package]\\nname = \\\"briskit_editor\\\"\\nversion = \\\"0.1.0\\\"\\nedition = \\\"2021\\\"\\n\\n[dependencies]\\ncrossterm = \\\"0.27.0\\\"\\n\\n\\n================================================\\nFile: src/editor.rs\\n================================================\\nuse crossterm::event::{read, Event, Event::Key, KeyCode::Char, KeyEvent, KeyModifiers};\\nmod terminal;\\nuse std::io::Error;\\nuse terminal::{Position, Size, Terminal};\\n\\nconst NAME: &str = env!(\\\"CARGO_PKG_NAME\\\");\\nconst VERSION: &str = env!(\\\"CARGO_PKG_VERSION\\\");\\n\\npub struct Editor {\\n    should_quit: bool,\\n}\\n\\nimpl Editor {\\n    pub const fn new() -> Self {\\n        Self { should_quit: false }\\n    }\\n\\n    pub fn run(&mut self) {\\n        Terminal::initialise().unwrap();\\n        let runner = self.repl();\\n        Terminal::terminate().unwrap();\\n        runner.unwrap();\\n    }\\n\\n    fn repl(&mut self) -> Result<(), Error> {\\n        loop {\\n            self.refresh_screen()?;\\n            if self.should_quit {\\n                break;\\n            }\\n            let event = read()?;\\n            self.evaluate_event(&event);\\n        }\\n        Ok(())\\n    }\\n\\n    fn evaluate_event(&mut self, event: &Event) {\\n        if let Key(KeyEvent {\\n            code, modifiers, ..\\n        }) = event\\n        {\\n            match code {\\n                Char('c') if *modifiers == KeyModifiers::CONTROL => {\\n                    self.should_quit = true;\\n                }\\n                _ => (),\\n            }\\n        }\\n    }\\n\\n    fn draw_tilde() -> Result<(), Error> {\\n        let Size { height, .. } = Terminal::size()?;\\n        for _row in 0..height {\\n            Terminal::clear_line()?;\\n            if _row == height / 3 {\\n                Self::draw_welcome_message()?;\\n            } else {\\n                Self::draw_empty_row()?;\\n            }\\n            if _row < height - 1 {\\n                Terminal::print(\\\"\\\\r\\\\n\\\")?;\\n            }\\n        }\\n        Ok(())\\n    }\\n\\n    fn refresh_screen(&self) -> Result<(), Error> {\\n        Terminal::hide_cursor()?;\\n        if self.should_quit {\\n            Terminal::clear_screen()?;\\n            Terminal::print(\\\"Quitting already?\\\\r\\\\n\\\")?;\\n        } else {\\n            Self::draw_tilde()?;\\n            Terminal::move_cursor_to(Position { x: 0, y: 0 })?;\\n            Terminal::show_cursor()?;\\n            Terminal::execute()?;\\n        }\\n        Ok(())\\n    }\\n\\n    fn draw_empty_row() -> Result<(), Error> {\\n        Terminal::print(\\\"~\\\")?;\\n        Ok(())\\n    }\\n\\n    fn draw_welcome_message() -> Result<(), Error> {\\n        let mut welcome_message = format!(\\\"{NAME} editor -- version {VERSION}\\\");\\n        let width = Terminal::size()?.width as usize;\\n        let len = welcome_message.len();\\n        let padding = (width - len) / 2;\\n        let spaces = \\\" \\\".repeat(padding - 1);\\n        welcome_message = format!(\\\"~{spaces}{welcome_message}\\\");\\n        welcome_message.truncate(width - 1);\\n        Terminal::print(welcome_message)?;\\n        Ok(())\\n    }\\n}\\n\\n\\n================================================\\nFile: src/main.rs\\n================================================\\n#![warn(clippy::all, clippy::pedantic, clippy::print_stdout)]\\n#![allow(dead_code)]\\nmod editor;\\nuse editor::Editor;\\n\\nfn main() {\\n    Editor::new().run();\\n}\\n\\n\\n================================================\\nFile: src/editor/terminal.rs\\n================================================\\nuse core::fmt::Display;\\nuse crossterm::cursor::{Hide, MoveTo, Show};\\nuse crossterm::style::Print;\\nuse crossterm::terminal::{disable_raw_mode, enable_raw_mode, size, Clear, ClearType};\\nuse crossterm::{queue, Command};\\nuse std::io::{stdout, Error, Write};\\n\\n#[derive(Copy, Clone)]\\npub struct Size {\\n    pub height: u16,\\n    pub width: u16,\\n}\\n\\n#[derive(Copy, Clone)]\\npub struct Position {\\n    pub x: u16,\\n    pub y: u16,\\n}\\n\\npub struct Terminal;\\n\\nimpl Terminal {\\n    pub fn initialise() -> Result<(), Error> {\\n        enable_raw_mode()?;\\n        Self::clear_screen()?;\\n        Self::move_cursor_to(Position { x: 0, y: 0 })?;\\n        Self::execute()?;\\n        Ok(())\\n    }\\n\\n    pub fn terminate() -> Result<(), Error> {\\n        Self::execute()?;\\n        disable_raw_mode()?;\\n        Ok(())\\n    }\\n\\n    pub fn clear_screen() -> Result<(), Error> {\\n        Self::queue_command(Clear(ClearType::All))?;\\n        Ok(())\\n    }\\n\\n    pub fn clear_line() -> Result<(), Error> {\\n        Self::queue_command(Clear(ClearType::CurrentLine))?;\\n        Ok(())\\n    }\\n\\n    pub fn move_cursor_to(position: Position) -> Result<(), Error> {\\n        Self::queue_command(MoveTo(position.x, position.y))?;\\n        Ok(())\\n    }\\n\\n    pub fn size() -> Result<Size, Error> {\\n        let (width, height) = size()?;\\n        Ok(Size { height, width })\\n    }\\n\\n    pub fn hide_cursor() -> Result<(), Error> {\\n        Self::queue_command(Hide)?;\\n        Ok(())\\n    }\\n\\n    pub fn show_cursor() -> Result<(), Error> {\\n        Self::queue_command(Show)?;\\n        Ok(())\\n    }\\n\\n    pub fn print<T: Display>(string: T) -> Result<(), Error> {\\n        Self::queue_command(Print(string))?;\\n        Ok(())\\n    }\\n\\n    pub fn execute() -> Result<(), Error> {\\n        stdout().flush()?;\\n        Ok(())\\n    }\\n\\n    fn queue_command<T: Command>(command: T) -> Result<(), Error> {\\n        queue!(stdout(), command)?;\\n        Ok(())\\n    }\\n}\", \"tree\": \"Directory structure:\\n\\u2514\\u2500\\u2500 mushrimpy-briskit_editor/\\n    \\u251c\\u2500\\u2500 Cargo.toml\\n    \\u2514\\u2500\\u2500 src/\\n        \\u251c\\u2500\\u2500 editor.rs\\n        \\u251c\\u2500\\u2500 main.rs\\n        \\u2514\\u2500\\u2500 editor/\\n            \\u2514\\u2500\\u2500 terminal.rs\\n\"}\n\n================================================\nFile: backend/test.py\n================================================\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\n\n# Load environment variables\nload_dotenv()\n\n# Initialize client with API key from .env\nclient = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))\n\naudio_file = open(\"./test.mp3\", \"rb\")\ntranscription = client.audio.transcriptions.create(\n    model=\"whisper-1\", \n    file=audio_file\n)\n\nprint(transcription.text)\n\n================================================\nFile: frontend/README.md\n================================================\nThis is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n\n\n================================================\nFile: frontend/components.json\n================================================\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n\n================================================\nFile: frontend/eslint.config.mjs\n================================================\nimport { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n});\n\nconst eslintConfig = [\n  ...compat.extends(\"next/core-web-vitals\", \"next/typescript\"),\n];\n\nexport default eslintConfig;\n\n\n================================================\nFile: frontend/next.config.ts\n================================================\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\n\n================================================\nFile: frontend/package.json\n================================================\n{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@ai-sdk/openai\": \"^1.1.11\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.1.2\",\n    \"ai\": \"^4.1.41\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.1.7\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.1.7\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n\n\n================================================\nFile: frontend/postcss.config.mjs\n================================================\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n\n\n================================================\nFile: frontend/tailwind.config.js\n================================================\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n\n\n\n================================================\nFile: frontend/tailwind.config.ts\n================================================\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"],\n    content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n   extend: {\n    colors: {\n     background: 'hsl(var(--background))',\n     foreground: 'hsl(var(--foreground))',\n     card: {\n      DEFAULT: 'hsl(var(--card))',\n      foreground: 'hsl(var(--card-foreground))'\n     },\n     popover: {\n      DEFAULT: 'hsl(var(--popover))',\n      foreground: 'hsl(var(--popover-foreground))'\n     },\n     primary: {\n      DEFAULT: 'hsl(var(--primary))',\n      foreground: 'hsl(var(--primary-foreground))'\n     },\n     secondary: {\n      DEFAULT: 'hsl(var(--secondary))',\n      foreground: 'hsl(var(--secondary-foreground))'\n     },\n     muted: {\n      DEFAULT: 'hsl(var(--muted))',\n      foreground: 'hsl(var(--muted-foreground))'\n     },\n     accent: {\n      DEFAULT: 'hsl(var(--accent))',\n      foreground: 'hsl(var(--accent-foreground))'\n     },\n     destructive: {\n      DEFAULT: 'hsl(var(--destructive))',\n      foreground: 'hsl(var(--destructive-foreground))'\n     },\n     border: 'hsl(var(--border))',\n     input: 'hsl(var(--input))',\n     ring: 'hsl(var(--ring))',\n     chart: {\n      '1': 'hsl(var(--chart-1))',\n      '2': 'hsl(var(--chart-2))',\n      '3': 'hsl(var(--chart-3))',\n      '4': 'hsl(var(--chart-4))',\n      '5': 'hsl(var(--chart-5))'\n     }\n    },\n    borderRadius: {\n     lg: 'var(--radius)',\n     md: 'calc(var(--radius) - 2px)',\n     sm: 'calc(var(--radius) - 4px)'\n    }\n   }\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n\n\n================================================\nFile: frontend/tsconfig.json\n================================================\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n\n\n================================================\nFile: frontend/types.d.ts\n================================================\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  results: {\n    [index: number]: {\n      [index: number]: {\n        transcript: string\n      }\n    }\n  }\n}\n\ninterface SpeechRecognition extends EventTarget {\n  continuous: boolean\n  interimResults: boolean\n  onresult: (event: SpeechRecognitionEvent) => void\n  onerror: (event: SpeechRecognitionErrorEvent) => void\n  onend: () => void\n  start: () => void\n  stop: () => void\n}\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: new () => SpeechRecognition\n    webkitSpeechRecognition: new () => SpeechRecognition\n  }\n}\n\nexport {} \n\n================================================\nFile: frontend/.gitignore\n================================================\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files (can opt-in for committing if needed)\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n\n\n================================================\nFile: frontend/app/globals.css\n================================================\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n================================================\nFile: frontend/app/layout.tsx\n================================================\nimport type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Gitman\",\n  description: \"Gitman is a tool that helps you understand codebases.\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n\n\n================================================\nFile: frontend/app/page.tsx\n================================================\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { ingestRepository, sendChatMessage } from \"@/lib/api\"\nimport { Send, Mic, MicOff } from \"lucide-react\"\nimport type { Message, RepoContent } from \"@/lib/types\"\n\nexport default function Home() {\n  const [repoUrl, setRepoUrl] = useState(\"\")\n  const [repoContent, setRepoContent] = useState<RepoContent | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [messages, setMessages] = useState<Message[]>([])\n  const [input, setInput] = useState(\"\")\n  const [isListening, setIsListening] = useState(false)\n  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null)\n  const [synthesis, setSynthesis] = useState<SpeechSynthesis | null>(null)\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Speech Recognition setup\n      if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n        const recognitionInstance = new SpeechRecognition()\n        recognitionInstance.continuous = false\n        recognitionInstance.interimResults = false\n\n        recognitionInstance.onresult = (event) => {\n          const transcript = event.results[0][0].transcript\n          setInput(transcript)\n          handleChatSubmit(new Event('submit') as any)\n        }\n\n        recognitionInstance.onerror = () => setIsListening(false)\n        recognitionInstance.onend = () => setIsListening(false)\n\n        setRecognition(recognitionInstance)\n      }\n\n      // Speech Synthesis setup\n      if ('speechSynthesis' in window) {\n        setSynthesis(window.speechSynthesis)\n      }\n    }\n  }, [])\n\n  const toggleListening = () => {\n    if (!recognition) return\n\n    if (isListening) {\n      recognition.stop()\n    } else {\n      recognition.start()\n    }\n    setIsListening(!isListening)\n  }\n\n  const speakMessage = (text: string) => {\n    if (synthesis) {\n      const utterance = new SpeechSynthesisUtterance(text)\n      synthesis.speak(utterance)\n    }\n  }\n\n  const handleChatSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (!input.trim() || !repoUrl) return\n\n    const userMessage: Message = { role: \"user\", content: input }\n    setMessages(prev => [...prev, userMessage])\n    const currentInput = input // Store current input\n    setInput(\"\")\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const response = await sendChatMessage(currentInput, repoUrl)\n      if (response.success) {\n        const aiMessage: Message = {\n          role: \"assistant\",\n          content: response.response\n        }\n        setMessages(prev => [...prev, aiMessage])\n        if (synthesis) {\n          speakMessage(response.response)\n        }\n      } else {\n        throw new Error(response.error || 'Failed to get response')\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to send message'\n      setError(errorMessage)\n      setMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: `Error: ${errorMessage}`\n      }])\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleRepoSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const result = await ingestRepository(repoUrl)\n      setRepoContent(result)\n      setMessages([{\n        role: \"assistant\",\n        content: `Repository ingested successfully! I'm ready to chat about the repository: ${repoUrl}. What would you like to know?`\n      }])\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'An error occurred')\n      setRepoContent(null)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle>GitHub Repo Analysis</CardTitle>\n          <CardDescription>Enter a GitHub repository URL to analyze its content.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleRepoSubmit} className=\"flex space-x-2 mb-4\">\n            <Input\n              type=\"url\"\n              placeholder=\"https://github.com/username/repo\"\n              value={repoUrl}\n              onChange={(e) => setRepoUrl(e.target.value)}\n              required\n              disabled={isLoading}\n            />\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? \"Loading...\" : \"Analyze\"}\n            </Button>\n          </form>\n\n          <ScrollArea className=\"h-[400px] w-full rounded-md border p-4\">\n            {error && (\n              <div className=\"text-red-500 mb-4\">\n                Error: {error}\n              </div>\n            )}\n            {repoContent && (\n              <div className=\"space-y-4\">\n                <div className=\"text-green-600 font-medium mb-4\">\n                  Repository was ingested successfully!\n                </div>\n                <div className=\"space-y-4\">\n                  {messages.map((message, i) => (\n                    <div key={i} className=\"space-y-1\">\n                      {message.role === 'user' ? (\n                        <div>\n                          <span className=\"font-semibold\">You: </span>\n                          {message.content}\n                        </div>\n                      ) : (\n                        <div>\n                          <span className=\"font-semibold\">Gitman: </span>\n                          {message.content}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </ScrollArea>\n        </CardContent>\n        {repoContent && (\n          <CardFooter>\n            <form onSubmit={handleChatSubmit} className=\"flex w-full space-x-2\">\n              <Input\n                placeholder=\"Ask a question about the repository...\"\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                disabled={isLoading}\n              />\n              <Button type=\"submit\" disabled={isLoading}>\n                <Send className=\"h-4 w-4 mr-2\" />\n                {isLoading ? \"Sending...\" : \"Send\"}\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={toggleListening}\n                variant={isListening ? \"destructive\" : \"default\"}\n              >\n                {isListening ? (\n                  <MicOff className=\"h-4 w-4\" />\n                ) : (\n                  <Mic className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </form>\n          </CardFooter>\n        )}\n      </Card>\n    </main>\n  )\n}\n\n================================================\nFile: frontend/components/ui/button.tsx\n================================================\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n\n\n================================================\nFile: frontend/components/ui/card.tsx\n================================================\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n\n\n================================================\nFile: frontend/components/ui/input.tsx\n================================================\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n\n\n================================================\nFile: frontend/components/ui/scroll-area.tsx\n================================================\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n\n\n================================================\nFile: frontend/components/ui/separator.tsx\n================================================\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n\n\n================================================\nFile: frontend/lib/api.ts\n================================================\nexport async function ingestRepository(url: string) {\n    const response = await fetch('http://localhost:8000/api/ingest', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ url }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok || !data.success) {\n        throw new Error(data.error || 'Failed to ingest repository');\n    }\n\n    return data;\n}\n\nexport async function sendChatMessage(message: string, repo_url: string) {\n    const response = await fetch('http://localhost:8000/api/chat', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message, repo_url }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.error || 'Failed to send message');\n    }\n\n    if (!data.success) {\n        throw new Error(data.error || 'Failed to get response');\n    }\n\n    return data;\n} \n\n================================================\nFile: frontend/lib/types.ts\n================================================\nexport interface Message {\n    role: \"user\" | \"assistant\"\n    content: string\n}\n\nexport interface RepoContent {\n    success: boolean\n    content: string\n    tree: string\n    error?: string\n}\n\n// Add proper types for Web Speech API\ninterface SpeechRecognitionEvent {\n    results: {\n        [index: number]: {\n            [index: number]: {\n                transcript: string\n            }\n        }\n    }\n}\n\ndeclare global {\n    interface Window {\n        webkitSpeechRecognition: any\n        SpeechRecognition: any\n    }\n}\n\nexport interface SpeechRecognition {\n    continuous: boolean\n    interimResults: boolean\n    onresult: (event: SpeechRecognitionEvent) => void\n    onerror: () => void\n    onend: () => void\n    start: () => void\n    stop: () => void\n} \n\n================================================\nFile: frontend/lib/utils.ts\n================================================\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}", "tree": "Directory structure:\n\u2514\u2500\u2500 phillipyan300-gitinsight/\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 planning.txt\n    \u251c\u2500\u2500 requirements.txt\n    \u251c\u2500\u2500 store.txt\n    \u251c\u2500\u2500 backend/\n    \u2502   \u251c\u2500\u2500 app.py\n    \u2502   \u251c\u2500\u2500 chat_pipeline.py\n    \u2502   \u251c\u2500\u2500 gitingest_scraper.py\n    \u2502   \u251c\u2500\u2500 requirements.txt\n    \u2502   \u251c\u2500\u2500 temp_context.json\n    \u2502   \u251c\u2500\u2500 test.m4a\n    \u2502   \u251c\u2500\u2500 test.py\n    \u2502   \u2514\u2500\u2500 __pycache__/\n    \u2514\u2500\u2500 frontend/\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 components.json\n        \u251c\u2500\u2500 eslint.config.mjs\n        \u251c\u2500\u2500 next.config.ts\n        \u251c\u2500\u2500 package-lock.json\n        \u251c\u2500\u2500 package.json\n        \u251c\u2500\u2500 postcss.config.mjs\n        \u251c\u2500\u2500 tailwind.config.js\n        \u251c\u2500\u2500 tailwind.config.ts\n        \u251c\u2500\u2500 tsconfig.json\n        \u251c\u2500\u2500 types.d.ts\n        \u251c\u2500\u2500 .gitignore\n        \u251c\u2500\u2500 app/\n        \u2502   \u251c\u2500\u2500 globals.css\n        \u2502   \u251c\u2500\u2500 layout.tsx\n        \u2502   \u2514\u2500\u2500 page.tsx\n        \u251c\u2500\u2500 components/\n        \u2502   \u2514\u2500\u2500 ui/\n        \u2502       \u251c\u2500\u2500 button.tsx\n        \u2502       \u251c\u2500\u2500 card.tsx\n        \u2502       \u251c\u2500\u2500 input.tsx\n        \u2502       \u251c\u2500\u2500 scroll-area.tsx\n        \u2502       \u2514\u2500\u2500 separator.tsx\n        \u251c\u2500\u2500 lib/\n        \u2502   \u251c\u2500\u2500 api.ts\n        \u2502   \u251c\u2500\u2500 types.ts\n        \u2502   \u2514\u2500\u2500 utils.ts\n        \u2514\u2500\u2500 public/\n"}