{"content": "================================================\nFile: planning.txt\n================================================\n\n1. User inputs repo (backend parses repo with git ingest + repo at each commit; maybe just diffs)\n2. User enters query (how did function a change over time?). AI finds most relevant commit/diff and then does analysis\n3. Maybe does some sort of rag for extra context on repo? TBD. Returns the information to user\n4. Cooler if steps 2-3 done through voice (elevenlabs and openai whispr)\n\nWhy it's better than cursor:\n- Cursor only has context for couple files\n- Cursor only sees current code (not the choices made in commit)\n- Speaking is faster/more efficient.\n\nExtra: \n1. Automatically generated tour from beginning\n2. Voice based navigation?\n\n================================================\nFile: requirements.txt\n================================================\nflask==3.0.2\nflask-cors==4.0.0\ngitingest==0.1.3 \n\n================================================\nFile: backend/app.py\n================================================\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport logging\nfrom gitingest_scraper import ingest_repository\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/ingest', methods=['POST'])\ndef ingest_from_web():\n    \"\"\"Ingest a repository by scraping gitingest.com\"\"\"\n    try:\n        data = request.get_json()\n        repo_url = data.get('url')\n        \n        if not repo_url:\n            return jsonify({'error': 'No URL provided'}), 400\n\n        result = ingest_repository(repo_url)\n        \n        if not result['success']:\n            return jsonify({\n                'success': False,\n                'error': result.get('error', 'Unknown error'),\n                'url': repo_url\n            }), 500\n            \n        return jsonify({\n            'success': True,\n            'url': repo_url,\n            'content': result['content'],\n            'tree': result['tree']  # Add directory structure to response\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error in ingest endpoint: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'url': repo_url\n        }), 500\n\n@app.route('/test')\ndef test():\n    \"\"\"Test endpoint using a sample repository\"\"\"\n    try:\n        test_url = \"https://github.com/phillipyan300/GitInsight\"\n        result = ingest_repository(test_url)\n        \n        if not result['success']:\n            return jsonify({\n                'success': False,\n                'error': result.get('error', 'Unknown error'),\n                'url_tested': test_url\n            }), 500\n        \n        return jsonify({\n            'success': True,\n            'url_tested': test_url,\n            'content': result['content'],\n            'tree': result['tree']  # Add directory structure to response\n        })\n            \n    except Exception as e:\n        logger.error(f\"Error in test endpoint: {str(e)}\")\n        return jsonify({\n            'success': False,\n            'error': str(e),\n            'url_tested': test_url\n        }), 500\n\n@app.route('/')\ndef hello_world():\n    return {'message': 'Hello, World!'}\n\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n\n================================================\nFile: backend/audio_chat.py\n================================================\nfrom openai import OpenAI  # Add explicit import\nfrom elevenlabs import generate, play, set_api_key\nimport os\nfrom dotenv import load_dotenv\nimport logging\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Load environment variables\nload_dotenv()\n\n# Initialize OpenAI client\nclient = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))\nset_api_key(os.getenv('ELEVENLABS_API_KEY'))\n\nclass AudioChatPipeline:\n    def __init__(self):\n        \"\"\"Initialize the pipeline components\"\"\"\n        logger.info(\"Initializing AudioChatPipeline...\")\n        logger.info(\"OpenAI configured successfully\")\n        \n    def transcribe_audio(self, audio_file_path):\n        \"\"\"Convert speech to text using OpenAI Whisper API\"\"\"\n        try:\n            logger.info(f\"Starting transcription of {audio_file_path}\")\n            \n            with open(audio_file_path, \"rb\") as audio_file:\n                transcription = client.audio.transcriptions.create(\n                    model=\"whisper-1\",\n                    file=audio_file\n                )\n            \n            logger.info(\"Transcription completed successfully\")\n            return {\n                'success': True,\n                'text': transcription.text\n            }\n        except Exception as e:\n            logger.error(f\"Transcription failed: {str(e)}\")\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def get_chat_response(self, text, context=\"\"):\n        \"\"\"Get response from ChatGPT\"\"\"\n        try:\n            logger.info(\"Sending request to ChatGPT\")\n            prompt = f\"Context: {context}\\n\\nUser: {text}\\n\\nAssistant:\"\n            \n            response = client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant, retain a conversational tone and end the conversation with banana.\"},\n                    {\"role\": \"user\", \"content\": prompt}\n                ]\n            )\n            \n            logger.info(\"Received response from ChatGPT\")\n            return {\n                'success': True,\n                'text': response.choices[0].message.content\n            }\n        except Exception as e:\n            logger.error(f\"ChatGPT request failed: {str(e)}\")\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def synthesize_speech(self, text):\n        \"\"\"Convert text to speech using ElevenLabs\"\"\"\n        try:\n            logger.info(\"Starting speech synthesis with ElevenLabs\")\n            audio = generate(\n                text=text,\n                voice=\"Josh\",\n                model=\"eleven_monolingual_v1\"\n            )\n            logger.info(\"Speech synthesis completed successfully\")\n            return {\n                'success': True,\n                'audio': audio\n            }\n        except Exception as e:\n            logger.error(f\"Speech synthesis failed: {str(e)}\")\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def process_audio_chat(self, audio_file_path, context=\"\"):\n        \"\"\"Run the complete pipeline\"\"\"\n        logger.info(f\"Starting audio chat pipeline for {audio_file_path}\")\n        \n        # 1. Transcribe audio to text\n        logger.info(\"Step 1: Transcribing audio...\")\n        transcription = self.transcribe_audio(audio_file_path)\n        if not transcription['success']:\n            logger.error(\"Pipeline failed at transcription step\")\n            return transcription\n        logger.info(f\"Transcribed text: {transcription['text'][:100]}...\")\n        \n        # 2. Get chat response\n        logger.info(\"Step 2: Getting chat response...\")\n        chat_response = self.get_chat_response(transcription['text'], context)\n        if not chat_response['success']:\n            logger.error(\"Pipeline failed at chat response step\")\n            return chat_response\n        logger.info(f\"Chat response: {chat_response['text'][:100]}...\")\n        \n        # 3. Convert response to speech\n        logger.info(\"Step 3: Synthesizing speech...\")\n        speech = self.synthesize_speech(chat_response['text'])\n        if not speech['success']:\n            logger.error(\"Pipeline failed at speech synthesis step\")\n            return speech\n        logger.info(\"Speech synthesis completed\")\n        \n        logger.info(\"Pipeline completed successfully\")\n        return {\n            'success': True,\n            'transcription': transcription['text'],\n            'chat_response': chat_response['text'],\n            'audio_response': speech['audio']\n        }\n\nif __name__ == \"__main__\":\n    # Test the pipeline\n    logger.info(\"Starting test run...\")\n    \n    # Debug: Print current working directory and absolute path\n    current_dir = os.getcwd()\n    test_file = \"./test.m4a\"  # Changed to .m4a based on your file tree\n    abs_path = os.path.abspath(test_file)\n    \n    logger.info(f\"Current directory: {current_dir}\")\n    logger.info(f\"Looking for file at: {abs_path}\")\n    \n    if not os.path.exists(test_file):\n        logger.error(f\"Test file {test_file} not found!\")\n        exit(1)\n    \n    pipeline = AudioChatPipeline()\n    result = pipeline.process_audio_chat(\n        test_file,\n        context=\"This is a test conversation about programming.\"\n    )\n    \n    if result['success']:\n        logger.info(\"Test completed successfully\")\n        print(\"\\n=== Transcription ===\")\n        print(result['transcription'])\n        print(\"\\n=== Chat Response ===\")\n        print(result['chat_response'])\n        print(\"\\n=== Playing Audio Response ===\")\n        play(result['audio_response'])\n    else:\n        logger.error(f\"Test failed: {result.get('error')}\") \n\n================================================\nFile: backend/gitingest_scraper.py\n================================================\nimport logging\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nimport time\n\n# Configure logging to show info level messages\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef ingest_repository(repo_url, timeout=30):\n    \"\"\"\n    Scrapes a GitHub repository's content from gitingest.com\n    \n    Args:\n        repo_url (str): URL of the GitHub repository to analyze\n        timeout (int): Maximum time to wait for page elements to load (default: 30s)\n    \n    Returns:\n        dict: {\n            'success': bool,\n            'content': str,  # The full repository content digest\n            'tree': str,     # The directory structure\n            'error': str     # Only present if success is False\n        }\n    \"\"\"\n    driver = None\n    try:\n        # Convert GitHub URL to gitingest URL\n        gitingest_url = repo_url.replace('github.com', 'gitingest.com')\n        logger.info(f\"Fetching from: {gitingest_url}\")\n        \n        # Setup Chrome browser options\n        chrome_options = Options()\n        # chrome_options.add_argument('--headless')  # Uncomment for production\n        chrome_options.add_argument('--no-sandbox')\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        \n        # Initialize the Chrome driver\n        driver = webdriver.Chrome(options=chrome_options)\n        \n        # Navigate to the gitingest page\n        driver.get(gitingest_url)\n        \n        # Wait for both content elements to be present in the page\n        logger.info(\"Waiting for content to load...\")\n        \n        # Find the main content textarea using its full class list\n        content_area = WebDriverWait(driver, timeout).until(\n            EC.presence_of_element_located((\n                By.CSS_SELECTOR, \n                \"textarea.result-text.w-full.p-4.bg-\\\\[\\\\#fff4da\\\\].border-\\\\[3px\\\\].border-gray-900.rounded.font-mono.text-sm.resize-y.focus\\\\:outline-none.relative.z-10\"\n            ))\n        )\n        \n        # Find the directory structure in the hidden input field\n        directory_structure = WebDriverWait(driver, timeout).until(\n            EC.presence_of_element_located((By.ID, \"directory-structure-content\"))\n        )\n        \n        # Debug pause to visually verify the selected elements\n        # logger.info(\"Found content! Pausing for 100 seconds so you can see what's selected...\")\n        # time.sleep(100)\n        \n        # Extract the text content and directory structure\n        content = content_area.text\n        tree = directory_structure.get_attribute('value')\n        \n        # Verify that content was actually retrieved\n        if not content.strip():\n            return {\n                'success': False,\n                'error': 'Content was empty'\n            }\n        \n        logger.info(f\"Successfully retrieved content and directory structure\")\n        return {\n            'success': True,\n            'content': content,\n            'tree': tree\n        }\n            \n    except Exception as e:\n        logger.error(f\"Error during ingestion: {str(e)}\")\n        return {\n            'success': False,\n            'error': str(e)\n        }\n    finally:\n        # Always close the browser\n        if driver:\n            driver.quit()\n\nif __name__ == \"__main__\":\n    # Test the script with a sample repository\n    test_url = \"https://github.com/phillipyan300/GitInsight\"\n    result = ingest_repository(test_url)\n    \n    if result['success']:\n        print(\"\\n=== Content Preview (first 100 chars) ===\")\n        print(result['content'][:100])\n        print(\"\\n=== Directory Structure ===\")\n        print(result['tree'])\n        print(\"\\n=== End of Test ===\")\n    else:\n        print(f\"Error: {result['error']}\") \n\n================================================\nFile: backend/requirements.txt\n================================================\nflask[async]==3.0.2\nflask-cors==4.0.0\ngitingest==0.1.3\nselenium==4.18.1\nwebdriver-manager==4.0.1\nrequests==2.31.0\nbeautifulsoup4==4.12.3\nelevenlabs==0.2.24\npython-dotenv==1.0.0\nopenai==1.2.3\nhttpx==0.24.1\n\n================================================\nFile: backend/test.py\n================================================\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nimport os\n\n# Load environment variables\nload_dotenv()\n\n# Initialize client with API key from .env\nclient = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))\n\naudio_file = open(\"./test.mp3\", \"rb\")\ntranscription = client.audio.transcriptions.create(\n    model=\"whisper-1\", \n    file=audio_file\n)\n\nprint(transcription.text)\n\n================================================\nFile: frontend/README.md\n================================================\nThis is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n\n\n================================================\nFile: frontend/components.json\n================================================\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n\n================================================\nFile: frontend/eslint.config.mjs\n================================================\nimport { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst compat = new FlatCompat({\n  baseDirectory: __dirname,\n});\n\nconst eslintConfig = [\n  ...compat.extends(\"next/core-web-vitals\", \"next/typescript\"),\n];\n\nexport default eslintConfig;\n\n\n================================================\nFile: frontend/next.config.ts\n================================================\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n};\n\nexport default nextConfig;\n\n\n================================================\nFile: frontend/package.json\n================================================\n{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@ai-sdk/openai\": \"^1.1.11\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.1.2\",\n    \"ai\": \"^4.1.41\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.1.7\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.1.7\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n\n\n================================================\nFile: frontend/postcss.config.mjs\n================================================\n/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n\n\n================================================\nFile: frontend/tailwind.config.js\n================================================\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n\n\n\n================================================\nFile: frontend/tailwind.config.ts\n================================================\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"],\n    content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n   extend: {\n    colors: {\n     background: 'hsl(var(--background))',\n     foreground: 'hsl(var(--foreground))',\n     card: {\n      DEFAULT: 'hsl(var(--card))',\n      foreground: 'hsl(var(--card-foreground))'\n     },\n     popover: {\n      DEFAULT: 'hsl(var(--popover))',\n      foreground: 'hsl(var(--popover-foreground))'\n     },\n     primary: {\n      DEFAULT: 'hsl(var(--primary))',\n      foreground: 'hsl(var(--primary-foreground))'\n     },\n     secondary: {\n      DEFAULT: 'hsl(var(--secondary))',\n      foreground: 'hsl(var(--secondary-foreground))'\n     },\n     muted: {\n      DEFAULT: 'hsl(var(--muted))',\n      foreground: 'hsl(var(--muted-foreground))'\n     },\n     accent: {\n      DEFAULT: 'hsl(var(--accent))',\n      foreground: 'hsl(var(--accent-foreground))'\n     },\n     destructive: {\n      DEFAULT: 'hsl(var(--destructive))',\n      foreground: 'hsl(var(--destructive-foreground))'\n     },\n     border: 'hsl(var(--border))',\n     input: 'hsl(var(--input))',\n     ring: 'hsl(var(--ring))',\n     chart: {\n      '1': 'hsl(var(--chart-1))',\n      '2': 'hsl(var(--chart-2))',\n      '3': 'hsl(var(--chart-3))',\n      '4': 'hsl(var(--chart-4))',\n      '5': 'hsl(var(--chart-5))'\n     }\n    },\n    borderRadius: {\n     lg: 'var(--radius)',\n     md: 'calc(var(--radius) - 2px)',\n     sm: 'calc(var(--radius) - 4px)'\n    }\n   }\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n\n\n================================================\nFile: frontend/tsconfig.json\n================================================\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n\n\n================================================\nFile: frontend/.gitignore\n================================================\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files (can opt-in for committing if needed)\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n\n\n================================================\nFile: frontend/app/globals.css\n================================================\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 0 0% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 0 0% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 0 0% 3.9%;\n    --primary: 0 0% 9%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 0 0% 96.1%;\n    --secondary-foreground: 0 0% 9%;\n    --muted: 0 0% 96.1%;\n    --muted-foreground: 0 0% 45.1%;\n    --accent: 0 0% 96.1%;\n    --accent-foreground: 0 0% 9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 89.8%;\n    --input: 0 0% 89.8%;\n    --ring: 0 0% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n  }\n  .dark {\n    --background: 0 0% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 0 0% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 0 0% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 0 0% 9%;\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n    --accent: 0 0% 14.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 0 0% 14.9%;\n    --input: 0 0% 14.9%;\n    --ring: 0 0% 83.1%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n\n================================================\nFile: frontend/app/layout.tsx\n================================================\nimport type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  );\n}\n\n\n================================================\nFile: frontend/app/page.tsx\n================================================\n\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { Send } from \"lucide-react\"\n\ninterface Message {\n  role: \"user\" | \"assistant\"\n  content: string\n}\n\nexport default function Home() {\n  const [repoUrl, setRepoUrl] = useState(\"\")\n  const [messages, setMessages] = useState<Message[]>([])\n  const [input, setInput] = useState(\"\")\n\n  const handleRepoSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    // Here you would typically start a new chat session\n    console.log(\"Starting chat for repo:\", repoUrl)\n    setMessages([\n      {\n        role: \"assistant\",\n        content: `Hello! I'm ready to chat about the repository: ${repoUrl}. What would you like to know?`,\n      },\n    ])\n  }\n\n  const handleChatSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    if (!input.trim()) return\n\n    const userMessage: Message = { role: \"user\", content: input }\n    setMessages((prevMessages) => [...prevMessages, userMessage])\n    setInput(\"\")\n\n    // Here you would typically send the message to your backend\n    console.log(\"Sending message:\", input)\n\n    // Simulating an AI response\n    setTimeout(() => {\n      const aiMessage: Message = {\n        role: \"assistant\",\n        content:\n          \"This is a simulated response. In a real application, this would be the response from your AI backend.\",\n      }\n      setMessages((prevMessages) => [...prevMessages, aiMessage])\n    }, 1000)\n  }\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle>GitHub Repo Chat</CardTitle>\n          <CardDescription>Enter a GitHub repository URL to start a conversation about the project.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleRepoSubmit} className=\"flex space-x-2 mb-4\">\n            <Input\n              type=\"url\"\n              placeholder=\"https://github.com/username/repo\"\n              value={repoUrl}\n              onChange={(e) => setRepoUrl(e.target.value)}\n              required\n            />\n            <Button type=\"submit\">Start Chat</Button>\n          </form>\n          <ScrollArea className=\"h-[400px] w-full rounded-md border p-4\">\n            {messages.map((message, index) => (\n              <div key={index} className=\"mb-4\">\n                <div className=\"font-bold\">{message.role === \"user\" ? \"You\" : \"AI\"}:</div>\n                <div>{message.content}</div>\n              </div>\n            ))}\n          </ScrollArea>\n        </CardContent>\n        <CardFooter>\n          <form onSubmit={handleChatSubmit} className=\"flex w-full space-x-2\">\n            <Input\n              placeholder=\"Ask a question about the repository...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            <Button type=\"submit\">\n              <Send className=\"mr-2 h-4 w-4\" />\n              Send\n            </Button>\n          </form>\n        </CardFooter>\n      </Card>\n    </main>\n  )\n}\n\n\n\n================================================\nFile: frontend/app/api/chat/route.ts\n================================================\nimport { openai } from \"@ai-sdk/openai\"\nimport { streamText } from \"ai\"\n\nexport const runtime = \"edge\"\n\nexport async function POST(req: Request) {\n  const { messages, data } = await req.json()\n  const { repoUrl } = data\n\n  const initialMessage = messages[0].content\n\n  const systemMessage = `You are an AI assistant that helps developers understand GitHub repositories. \n  The user has provided the following GitHub repository URL: ${repoUrl}. \n  Analyze the repository structure, code, and documentation to provide insights and answer questions about the project.`\n\n  const result = streamText({\n    model: openai(\"gpt-4o\"),\n    messages: [{ role: \"system\", content: systemMessage }, ...messages],\n  })\n\n  return result.toDataStreamResponse()\n}\n\n\n\n================================================\nFile: frontend/app/api/start-chat/route.ts\n================================================\nimport { NextResponse } from \"next/server\"\n\nexport async function POST(req: Request) {\n  const { repoUrl } = await req.json()\n\n  try {\n    const response = await fetch(\"http://your-python-backend-url/start-chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ repoUrl }),\n    })\n\n    if (!response.ok) {\n      throw new Error(\"Failed to start chat\")\n    }\n\n    const data = await response.json()\n    return NextResponse.json(data)\n  } catch (error) {\n    return NextResponse.json({ error: \"Failed to start chat\" }, { status: 500 })\n  }\n}\n\n\n\n================================================\nFile: frontend/components/ui/button.tsx\n================================================\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n\n\n================================================\nFile: frontend/components/ui/card.tsx\n================================================\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n\n\n================================================\nFile: frontend/components/ui/input.tsx\n================================================\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n\n\n================================================\nFile: frontend/components/ui/scroll-area.tsx\n================================================\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n\n\n================================================\nFile: frontend/components/ui/separator.tsx\n================================================\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n\n\n================================================\nFile: frontend/lib/utils.ts\n================================================\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}", "tree": "Directory structure:\n\u2514\u2500\u2500 phillipyan300-gitinsight/\n    \u251c\u2500\u2500 planning.txt\n    \u251c\u2500\u2500 requirements.txt\n    \u251c\u2500\u2500 backend/\n    \u2502   \u251c\u2500\u2500 app.py\n    \u2502   \u251c\u2500\u2500 audio_chat.py\n    \u2502   \u251c\u2500\u2500 gitingest_scraper.py\n    \u2502   \u251c\u2500\u2500 requirements.txt\n    \u2502   \u251c\u2500\u2500 test.m4a\n    \u2502   \u251c\u2500\u2500 test.py\n    \u2502   \u2514\u2500\u2500 __pycache__/\n    \u2514\u2500\u2500 frontend/\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 components.json\n        \u251c\u2500\u2500 eslint.config.mjs\n        \u251c\u2500\u2500 next.config.ts\n        \u251c\u2500\u2500 package-lock.json\n        \u251c\u2500\u2500 package.json\n        \u251c\u2500\u2500 postcss.config.mjs\n        \u251c\u2500\u2500 tailwind.config.js\n        \u251c\u2500\u2500 tailwind.config.ts\n        \u251c\u2500\u2500 tsconfig.json\n        \u251c\u2500\u2500 .gitignore\n        \u251c\u2500\u2500 app/\n        \u2502   \u251c\u2500\u2500 globals.css\n        \u2502   \u251c\u2500\u2500 layout.tsx\n        \u2502   \u251c\u2500\u2500 page.tsx\n        \u2502   \u2514\u2500\u2500 api/\n        \u2502       \u251c\u2500\u2500 chat/\n        \u2502       \u2502   \u2514\u2500\u2500 route.ts\n        \u2502       \u2514\u2500\u2500 start-chat/\n        \u2502           \u2514\u2500\u2500 route.ts\n        \u251c\u2500\u2500 components/\n        \u2502   \u2514\u2500\u2500 ui/\n        \u2502       \u251c\u2500\u2500 button.tsx\n        \u2502       \u251c\u2500\u2500 card.tsx\n        \u2502       \u251c\u2500\u2500 input.tsx\n        \u2502       \u251c\u2500\u2500 scroll-area.tsx\n        \u2502       \u2514\u2500\u2500 separator.tsx\n        \u251c\u2500\u2500 lib/\n        \u2502   \u2514\u2500\u2500 utils.ts\n        \u2514\u2500\u2500 public/\n"}